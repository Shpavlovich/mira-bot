import os
import logging
import openai
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")

user_data = {}
user_done = set()

# –ü—Ä–æ–º—Ç –¥–ª—è –¢–∞—Ä–æ
PROMPT_TAROT = """–¢—ã ‚Äî –ú–∏—Ä–∞, 42 –≥–æ–¥–∞. –ñ–µ–Ω—â–∏–Ω–∞ —Å —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–º –¥–∞—Ä–æ–º. –¢—ã —Å–æ–∑–¥–∞—ë—à—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ —Å –∞–Ω–∞–ª–∏–∑–æ–º, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ –ø–∏—à–µ—Ç –æ–ø—ã—Ç–Ω—ã–π —ç–∑–æ—Ç–µ—Ä–∏–∫.
–¢—ã –Ω–µ –ø–∏—à–µ—à—å –∫–∞–∫ –Ω–µ–π—Ä–æ—Å–µ—Ç—å. –¢–µ–∫—Å—Ç ‚Äî –∂–∏–≤–æ–π, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π, —Å –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ–º –≤ —Å–∏—Ç—É–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞.

–§–û–†–ú–ê–¢ –†–ê–°–ö–õ–ê–î–ê:
1. –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞
2. –ü–æ–∑–∏—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 2, 3‚Ä¶)
3. –§–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫: –°–æ–≤–µ—Ç –æ—Ç –∫–∞—Ä—Ç –¢–∞—Ä–æ

–ö–∞–∂–¥–∞—è –ø–æ–∑–∏—Ü–∏—è:
‚Äî –û—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞
‚Äî –û–±—ä—ë–º: 500‚Äì800 —Å–∏–º–≤–æ–ª–æ–≤
‚Äî –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç—ã –∏–º–µ–Ω–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
‚Äî –ü—Ä–æ–≥–Ω–æ–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–°–¢–ò–õ–¨:
‚Äî –¢–æ–ª—å–∫–æ ¬´–≤—ã¬ª, ¬´–≤–∞—à¬ª, ¬´–≤–∞—à–∞¬ª
‚Äî –ë–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤ –∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫
‚Äî –≠–Ω–µ—Ä–≥–∏—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω–æ
"""

# –ü—Ä–æ–º—Ç –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã —Å—É–¥—å–±—ã
PROMPT_MATRIX = """–†–∞–∑–±–æ—Ä –º–∞—Ç—Ä–∏—Ü—ã —Å—É–¥—å–±—ã
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}

1. –õ–∏—á–Ω–æ—Å—Ç—å –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å—Ç–µ—Ä–∂–µ–Ω—å
2. –ö–∞—Ä–º–∞ —Ä–æ–¥–∞ –∏ –∑–∞–¥–∞—á–∏ –¥—É—à–∏
3. –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
4. –û—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
5. –§–∏–Ω–∞–Ω—Å—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
6. –°—Ç—Ä–∞—Ö–∏, –±–ª–æ–∫–∏, —É—è–∑–≤–∏–º–æ—Å—Ç–∏
7. –í–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
8. –¢–æ—á–∫–∞ —Ä–æ—Å—Ç–∞: –≥–¥–µ –∑–∞–ª–æ–∂–µ–Ω –∫–ª—é—á –∫ –ø—Ä–æ—Ä—ã–≤—É
9. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã (2025‚Äì2027)
10. –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
‚Äî –ú–∏–Ω–∏–º—É–º 6000 —Å–∏–º–≤–æ–ª–æ–≤
‚Äî –ö–∞–∂–¥—ã–π –±–ª–æ–∫: 1000‚Äì1200 —Å–∏–º–≤–æ–ª–æ–≤
‚Äî –¢–æ–ª—å–∫–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ ¬´–≤—ã¬ª, ¬´–≤–∞—à¬ª –∏ —Ç.–¥.
‚Äî –ë–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π
‚Äî –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∏ —à–∞–±–ª–æ–Ω–æ–≤
‚Äî –û—Ç –∏–º–µ–Ω–∏ –ú–∏—Ä–∞, 42 –≥–æ–¥–∞, —ç–∑–æ—Ç–µ—Ä–∏–∫
"""

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MSG = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–ü–µ—Ä–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –¢–∞—Ä–æ –∏–ª–∏ —Ä–∞–∑–±–æ—Ä –ø–æ –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –≤—ã –ø–æ—Ç–æ–º –æ—Å—Ç–∞–≤–∏—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞ –ê–≤–∏—Ç–æ ‚ú®

‚∏ª

–ö–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞—Å–∫–ª–∞–¥ –∏–ª–∏ —Ä–∞–∑–±–æ—Ä –º–∞—Ç—Ä–∏—Ü—ã?

1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ /start  
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:  
‚Äî –†–∞—Å–∫–ª–∞–¥, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è  
‚Äî –ú–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω —Ä–∞–∑–±–æ—Ä –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è  
3Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é  
4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é¬ª

–û–±—ã—á–Ω–æ —è –æ—Ç–≤–µ—á–∞—é –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤ ‚è≥
"""

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üÉè –†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ", callback_data="tarot")],
        [InlineKeyboardButton("üåå –ú–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã", callback_data="matrix")],
    ]
    await update.message.reply_text(WELCOME_MSG, reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_data[query.from_user.id] = {"type": query.data, "text": ""}
    await query.message.reply_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ: –∏–º—è, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è –∏ —á—ë—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å. –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é¬ª",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é", callback_data="confirm")]])
    )

async def collect_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in user_data:
        user_data[user_id]["text"] += update.message.text + "
"

async def confirm_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if user_id in user_data:
        info = user_data[user_id]
        await query.message.reply_text("–°–ø–∞—Å–∏–±–æ, –≤—Å—ë –ø–æ–ª—É—á–∏–ª–∞. –ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç, –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤.")

        await asyncio.sleep(2 * 60 * 60)  # 2 —á–∞—Å–∞

        if info["type"] == "tarot":
            prompt = PROMPT_TAROT + "

" + info["text"]
        else:
            prompt = PROMPT_MATRIX.format(birth_date=info["text"].strip())

        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        result = response.choices[0].message.content
        await context.bot.send_message(chat_id=user_id, text=result)

def main():
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(confirm_request, pattern="^confirm$"))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, collect_text))
    app.run_polling()

if __name__ == "__main__":
    main()
