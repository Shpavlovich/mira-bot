import os
import logging
import openai
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")

user_data = {}

# –ü—Ä–æ–º—Ç –¥–ª—è –¢–∞—Ä–æ
PROMPT_TAROT = """
–¢—ã ‚Äî –ú–∏—Ä–∞, 42 –≥–æ–¥–∞. –ñ–µ–Ω—â–∏–Ω–∞ —Å —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–º –¥–∞—Ä–æ–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥ –∏ —è—Å–Ω–æ–≤–∏–¥—è—â–∞—è —Å –±–æ–ª–µ–µ —á–µ–º 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º...

–î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê:
{input_text}
"""

# –ü—Ä–æ–º—Ç –¥–ª—è –ú–∞—Ç—Ä–∏—Ü—ã —Å—É–¥—å–±—ã
PROMPT_MATRIX = """
–¢—ã ‚Äî –ú–∏—Ä–∞, 42 –≥–æ–¥–∞. –≠–∑–æ—Ç–µ—Ä–∏–∫, —è—Å–Ω–æ–≤–∏–¥—è—â–∞—è, –º–∞—Å—Ç–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã —Å—É–¥—å–±—ã...

–î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê:
{input_text}
"""

WELCOME_TEXT = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–ü–µ—Ä–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –¢–∞—Ä–æ –∏–ª–∏ —Ä–∞–∑–±–æ—Ä –ø–æ –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –ø–æ—Å–ª–µ –≤—ã –æ—Å—Ç–∞–≤–∏—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞ –ê–≤–∏—Ç–æ ‚ú®

‚∏ª

–ö–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É:

1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ /start
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ –∏–ª–∏ –º–∞—Ç—Ä–∏—Ü—É
3Ô∏è‚É£ –ü—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ
4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é¬ª
"""

INSTRUCTION_TAROT = (
    "–î–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ –ø—Ä–∏—à–ª–∏—Ç–µ:\n"
    "‚Äî –ò–º—è –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"
    "‚Äî –ò–º–µ–Ω–∞ –∏ –≤–æ–∑—Ä–∞—Å—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
    "‚Äî –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é\n"
    "‚Äî –ß—ë—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å\n\n"
    "–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é¬ª."
)

INSTRUCTION_MATRIX = (
    "–î–ª—è —Ä–∞–∑–±–æ—Ä–∞ –ø–æ –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã –ø—Ä–∏—à–ª–∏—Ç–µ:\n"
    "‚Äî –î–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)\n"
    "‚Äî –ò–º—è\n\n"
    "–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é¬ª."
)

RESPONSE_WAIT = "–°–ø–∞—Å–∏–±–æ, –≤—Å—ë –ø–æ–ª—É—á–∏–ª–∞. –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤–∏—Ç—Å—è..."
REVIEW_TEXT = "–î–ª—è —ç–Ω–µ—Ä–≥–æ–æ–±–º–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞ –ê–≤–∏—Ç–æ."

def get_main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üÉè –†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ", callback_data="tarot")],
        [InlineKeyboardButton("üåå –ú–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã", callback_data="matrix")]
    ])

def get_confirm_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é", callback_data="confirm")]
    ])

async def ask_gpt(prompt):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8,
            max_tokens=3500
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_user.id
    user_data[chat_id] = {"type": None, "text": ""}
    await update.message.reply_text(WELCOME_TEXT, reply_markup=get_main_keyboard())

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id

    if query.data == "tarot":
        user_data[chat_id] = {"type": "tarot", "text": ""}
        await query.message.reply_text(INSTRUCTION_TAROT, reply_markup=get_confirm_keyboard())

    elif query.data == "matrix":
        user_data[chat_id] = {"type": "matrix", "text": ""}
        await query.message.reply_text(INSTRUCTION_MATRIX, reply_markup=get_confirm_keyboard())

    elif query.data == "confirm":
        data = user_data.get(chat_id)
        if not data or not data["text"].strip():
            await query.message.reply_text("–í—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏.")
            return

        await query.message.reply_text(RESPONSE_WAIT)

        prompt = PROMPT_TAROT.format(input_text=data["text"]) if data["type"] == "tarot" else PROMPT_MATRIX.format(input_text=data["text"])
        result = await ask_gpt(prompt)

        await context.bot.send_message(chat_id=chat_id, text=result)
        await context.bot.send_message(chat_id=chat_id, text=REVIEW_TEXT)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    if chat_id in user_data:
        user_data[chat_id]["text"] += "\n" + update.message.text.strip()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()